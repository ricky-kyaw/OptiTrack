#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OptiTrack.Data.DBMLs
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OptiTrackDB")]
	public partial class TableModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppUserRole(AppUserRole instance);
    partial void UpdateAppUserRole(AppUserRole instance);
    partial void DeleteAppUserRole(AppUserRole instance);
    partial void InsertAppUser(AppUser instance);
    partial void UpdateAppUser(AppUser instance);
    partial void DeleteAppUser(AppUser instance);
    partial void InsertAttendance(Attendance instance);
    partial void UpdateAttendance(Attendance instance);
    partial void DeleteAttendance(Attendance instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertJobTitle(JobTitle instance);
    partial void UpdateJobTitle(JobTitle instance);
    partial void DeleteJobTitle(JobTitle instance);
    partial void InsertOvertimeRequest(OvertimeRequest instance);
    partial void UpdateOvertimeRequest(OvertimeRequest instance);
    partial void DeleteOvertimeRequest(OvertimeRequest instance);
    partial void InsertPayslipDetail(PayslipDetail instance);
    partial void UpdatePayslipDetail(PayslipDetail instance);
    partial void DeletePayslipDetail(PayslipDetail instance);
    partial void InsertPayslip(Payslip instance);
    partial void UpdatePayslip(Payslip instance);
    partial void DeletePayslip(Payslip instance);
    partial void InsertPayType(PayType instance);
    partial void UpdatePayType(PayType instance);
    partial void DeletePayType(PayType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    #endregion
		
		public TableModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TableModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TableModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TableModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppUserRole> AppUserRoles
		{
			get
			{
				return this.GetTable<AppUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AppUser> AppUsers
		{
			get
			{
				return this.GetTable<AppUser>();
			}
		}
		
		public System.Data.Linq.Table<Attendance> Attendances
		{
			get
			{
				return this.GetTable<Attendance>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<JobTitle> JobTitles
		{
			get
			{
				return this.GetTable<JobTitle>();
			}
		}
		
		public System.Data.Linq.Table<OvertimeRequest> OvertimeRequests
		{
			get
			{
				return this.GetTable<OvertimeRequest>();
			}
		}
		
		public System.Data.Linq.Table<PayslipDetail> PayslipDetails
		{
			get
			{
				return this.GetTable<PayslipDetail>();
			}
		}
		
		public System.Data.Linq.Table<Payslip> Payslips
		{
			get
			{
				return this.GetTable<Payslip>();
			}
		}
		
		public System.Data.Linq.Table<PayType> PayTypes
		{
			get
			{
				return this.GetTable<PayType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppUserRoles")]
	public partial class AppUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AppUserID;
		
		private System.Guid _RoleID;
		
		private EntityRef<AppUser> _AppUser;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppUserIDChanging(System.Guid value);
    partial void OnAppUserIDChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    #endregion
		
		public AppUserRole()
		{
			this._AppUser = default(EntityRef<AppUser>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AppUserID
		{
			get
			{
				return this._AppUserID;
			}
			set
			{
				if ((this._AppUserID != value))
				{
					if (this._AppUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppUserIDChanging(value);
					this.SendPropertyChanging();
					this._AppUserID = value;
					this.SendPropertyChanged("AppUserID");
					this.OnAppUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_AppUserRole", Storage="_AppUser", ThisKey="AppUserID", OtherKey="AppUserID", IsForeignKey=true)]
		public AppUser AppUser
		{
			get
			{
				return this._AppUser.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser.Entity;
				if (((previousValue != value) 
							|| (this._AppUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser.Entity = null;
						previousValue.AppUserRoles.Remove(this);
					}
					this._AppUser.Entity = value;
					if ((value != null))
					{
						value.AppUserRoles.Add(this);
						this._AppUserID = value.AppUserID;
					}
					else
					{
						this._AppUserID = default(System.Guid);
					}
					this.SendPropertyChanged("AppUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AppUserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AppUserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AppUserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppUsers")]
	public partial class AppUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AppUserID;
		
		private System.Nullable<System.Guid> _EmployeeID;
		
		private string _PasswordHash;
		
		private string _PasswordSalt;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private EntitySet<AppUserRole> _AppUserRoles;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppUserIDChanging(System.Guid value);
    partial void OnAppUserIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeIDChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    #endregion
		
		public AppUser()
		{
			this._AppUserRoles = new EntitySet<AppUserRole>(new Action<AppUserRole>(this.attach_AppUserRoles), new Action<AppUserRole>(this.detach_AppUserRoles));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppUserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AppUserID
		{
			get
			{
				return this._AppUserID;
			}
			set
			{
				if ((this._AppUserID != value))
				{
					this.OnAppUserIDChanging(value);
					this.SendPropertyChanging();
					this._AppUserID = value;
					this.SendPropertyChanged("AppUserID");
					this.OnAppUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime2")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_AppUserRole", Storage="_AppUserRoles", ThisKey="AppUserID", OtherKey="AppUserID")]
		public EntitySet<AppUserRole> AppUserRoles
		{
			get
			{
				return this._AppUserRoles;
			}
			set
			{
				this._AppUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_Employee", Storage="_Employees", ThisKey="AppUserID", OtherKey="AppUserID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AppUser", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AppUsers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AppUsers.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppUserRoles(AppUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = this;
		}
		
		private void detach_AppUserRoles(AppUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendance")]
	public partial class Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AttendanceID;
		
		private System.Guid _EmployeeID;
		
		private System.DateTime _ClockInTime;
		
		private System.Nullable<System.DateTime> _ClockOutTime;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendanceIDChanging(System.Guid value);
    partial void OnAttendanceIDChanged();
    partial void OnEmployeeIDChanging(System.Guid value);
    partial void OnEmployeeIDChanged();
    partial void OnClockInTimeChanging(System.DateTime value);
    partial void OnClockInTimeChanged();
    partial void OnClockOutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnClockOutTimeChanged();
    #endregion
		
		public Attendance()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClockInTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime ClockInTime
		{
			get
			{
				return this._ClockInTime;
			}
			set
			{
				if ((this._ClockInTime != value))
				{
					this.OnClockInTimeChanging(value);
					this.SendPropertyChanging();
					this._ClockInTime = value;
					this.SendPropertyChanged("ClockInTime");
					this.OnClockInTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClockOutTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ClockOutTime
		{
			get
			{
				return this._ClockOutTime;
			}
			set
			{
				if ((this._ClockOutTime != value))
				{
					this.OnClockOutTimeChanging(value);
					this.SendPropertyChanging();
					this._ClockOutTime = value;
					this.SendPropertyChanged("ClockOutTime");
					this.OnClockOutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Attendance", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Attendances.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Attendances.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DepartmentID;
		
		private string _DepartmentName;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
		
		public Department()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EmployeeID;
		
		private System.Guid _AppUserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private System.Guid _JobTitleID;
		
		private System.Guid _DepartmentID;
		
		private System.Guid _PayTypeID;
		
		private decimal _PayRate;
		
		private System.Nullable<System.Guid> _ManagerID;
		
		private System.DateTime _CreatedAt;
		
		private System.DateTime _UpdatedAt;
		
		private EntitySet<AppUser> _AppUsers;
		
		private EntitySet<Attendance> _Attendances;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<OvertimeRequest> _OvertimeRequests;
		
		private EntitySet<OvertimeRequest> _OvertimeRequests1;
		
		private EntitySet<Payslip> _Payslips;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<AppUser> _AppUser;
		
		private EntityRef<JobTitle> _JobTitle;
		
		private EntityRef<PayType> _PayType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(System.Guid value);
    partial void OnEmployeeIDChanged();
    partial void OnAppUserIDChanging(System.Guid value);
    partial void OnAppUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnJobTitleIDChanging(System.Guid value);
    partial void OnJobTitleIDChanged();
    partial void OnDepartmentIDChanging(System.Guid value);
    partial void OnDepartmentIDChanged();
    partial void OnPayTypeIDChanging(System.Guid value);
    partial void OnPayTypeIDChanged();
    partial void OnPayRateChanging(decimal value);
    partial void OnPayRateChanged();
    partial void OnManagerIDChanging(System.Nullable<System.Guid> value);
    partial void OnManagerIDChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.DateTime value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Employee()
		{
			this._AppUsers = new EntitySet<AppUser>(new Action<AppUser>(this.attach_AppUsers), new Action<AppUser>(this.detach_AppUsers));
			this._Attendances = new EntitySet<Attendance>(new Action<Attendance>(this.attach_Attendances), new Action<Attendance>(this.detach_Attendances));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._OvertimeRequests = new EntitySet<OvertimeRequest>(new Action<OvertimeRequest>(this.attach_OvertimeRequests), new Action<OvertimeRequest>(this.detach_OvertimeRequests));
			this._OvertimeRequests1 = new EntitySet<OvertimeRequest>(new Action<OvertimeRequest>(this.attach_OvertimeRequests1), new Action<OvertimeRequest>(this.detach_OvertimeRequests1));
			this._Payslips = new EntitySet<Payslip>(new Action<Payslip>(this.attach_Payslips), new Action<Payslip>(this.detach_Payslips));
			this._Department = default(EntityRef<Department>);
			this._Employee1 = default(EntityRef<Employee>);
			this._AppUser = default(EntityRef<AppUser>);
			this._JobTitle = default(EntityRef<JobTitle>);
			this._PayType = default(EntityRef<PayType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AppUserID
		{
			get
			{
				return this._AppUserID;
			}
			set
			{
				if ((this._AppUserID != value))
				{
					if (this._AppUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppUserIDChanging(value);
					this.SendPropertyChanging();
					this._AppUserID = value;
					this.SendPropertyChanged("AppUserID");
					this.OnAppUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid JobTitleID
		{
			get
			{
				return this._JobTitleID;
			}
			set
			{
				if ((this._JobTitleID != value))
				{
					if (this._JobTitle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobTitleIDChanging(value);
					this.SendPropertyChanging();
					this._JobTitleID = value;
					this.SendPropertyChanged("JobTitleID");
					this.OnJobTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PayTypeID
		{
			get
			{
				return this._PayTypeID;
			}
			set
			{
				if ((this._PayTypeID != value))
				{
					if (this._PayType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PayTypeID = value;
					this.SendPropertyChanged("PayTypeID");
					this.OnPayTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayRate", DbType="Decimal(10,2) NOT NULL")]
		public decimal PayRate
		{
			get
			{
				return this._PayRate;
			}
			set
			{
				if ((this._PayRate != value))
				{
					this.OnPayRateChanging(value);
					this.SendPropertyChanging();
					this._PayRate = value;
					this.SendPropertyChanged("PayRate");
					this.OnPayRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime2 NOT NULL")]
		public System.DateTime UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AppUser", Storage="_AppUsers", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<AppUser> AppUsers
		{
			get
			{
				return this._AppUsers;
			}
			set
			{
				this._AppUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Attendance", Storage="_Attendances", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Attendance> Attendances
		{
			get
			{
				return this._Attendances;
			}
			set
			{
				this._Attendances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employees", ThisKey="EmployeeID", OtherKey="ManagerID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeRequest", Storage="_OvertimeRequests", ThisKey="EmployeeID", OtherKey="ApproverID")]
		public EntitySet<OvertimeRequest> OvertimeRequests
		{
			get
			{
				return this._OvertimeRequests;
			}
			set
			{
				this._OvertimeRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeRequest1", Storage="_OvertimeRequests1", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<OvertimeRequest> OvertimeRequests1
		{
			get
			{
				return this._OvertimeRequests1;
			}
			set
			{
				this._OvertimeRequests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Payslip", Storage="_Payslips", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Payslip> Payslips
		{
			get
			{
				return this._Payslips;
			}
			set
			{
				this._Payslips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(System.Guid);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee1", ThisKey="ManagerID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ManagerID = value.EmployeeID;
					}
					else
					{
						this._ManagerID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_Employee", Storage="_AppUser", ThisKey="AppUserID", OtherKey="AppUserID", IsForeignKey=true)]
		public AppUser AppUser
		{
			get
			{
				return this._AppUser.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser.Entity;
				if (((previousValue != value) 
							|| (this._AppUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._AppUser.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._AppUserID = value.AppUserID;
					}
					else
					{
						this._AppUserID = default(System.Guid);
					}
					this.SendPropertyChanged("AppUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_Employee", Storage="_JobTitle", ThisKey="JobTitleID", OtherKey="JobTitleID", IsForeignKey=true)]
		public JobTitle JobTitle
		{
			get
			{
				return this._JobTitle.Entity;
			}
			set
			{
				JobTitle previousValue = this._JobTitle.Entity;
				if (((previousValue != value) 
							|| (this._JobTitle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobTitle.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._JobTitle.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._JobTitleID = value.JobTitleID;
					}
					else
					{
						this._JobTitleID = default(System.Guid);
					}
					this.SendPropertyChanged("JobTitle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Employee", Storage="_PayType", ThisKey="PayTypeID", OtherKey="PayTypeID", IsForeignKey=true)]
		public PayType PayType
		{
			get
			{
				return this._PayType.Entity;
			}
			set
			{
				PayType previousValue = this._PayType.Entity;
				if (((previousValue != value) 
							|| (this._PayType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayType.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._PayType.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PayTypeID = value.PayTypeID;
					}
					else
					{
						this._PayTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("PayType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppUsers(AppUser entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AppUsers(AppUser entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Attendances(Attendance entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_OvertimeRequests(OvertimeRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OvertimeRequests(OvertimeRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OvertimeRequests1(OvertimeRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_OvertimeRequests1(OvertimeRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Payslips(Payslip entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Payslips(Payslip entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTitles")]
	public partial class JobTitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _JobTitleID;
		
		private string _TitleName;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobTitleIDChanging(System.Guid value);
    partial void OnJobTitleIDChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    #endregion
		
		public JobTitle()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid JobTitleID
		{
			get
			{
				return this._JobTitleID;
			}
			set
			{
				if ((this._JobTitleID != value))
				{
					this.OnJobTitleIDChanging(value);
					this.SendPropertyChanging();
					this._JobTitleID = value;
					this.SendPropertyChanged("JobTitleID");
					this.OnJobTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_Employee", Storage="_Employees", ThisKey="JobTitleID", OtherKey="JobTitleID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OvertimeRequests")]
	public partial class OvertimeRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OvertimeRequestID;
		
		private System.Guid _EmployeeID;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private decimal _RateMultiplier;
		
		private string _Status;
		
		private System.Nullable<System.Guid> _ApproverID;
		
		private System.DateTime _CreatedAt;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOvertimeRequestIDChanging(System.Guid value);
    partial void OnOvertimeRequestIDChanged();
    partial void OnEmployeeIDChanging(System.Guid value);
    partial void OnEmployeeIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnRateMultiplierChanging(decimal value);
    partial void OnRateMultiplierChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnApproverIDChanging(System.Nullable<System.Guid> value);
    partial void OnApproverIDChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    #endregion
		
		public OvertimeRequest()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OvertimeRequestID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OvertimeRequestID
		{
			get
			{
				return this._OvertimeRequestID;
			}
			set
			{
				if ((this._OvertimeRequestID != value))
				{
					this.OnOvertimeRequestIDChanging(value);
					this.SendPropertyChanging();
					this._OvertimeRequestID = value;
					this.SendPropertyChanged("OvertimeRequestID");
					this.OnOvertimeRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateMultiplier", DbType="Decimal(4,2) NOT NULL")]
		public decimal RateMultiplier
		{
			get
			{
				return this._RateMultiplier;
			}
			set
			{
				if ((this._RateMultiplier != value))
				{
					this.OnRateMultiplierChanging(value);
					this.SendPropertyChanging();
					this._RateMultiplier = value;
					this.SendPropertyChanged("RateMultiplier");
					this.OnRateMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApproverID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ApproverID
		{
			get
			{
				return this._ApproverID;
			}
			set
			{
				if ((this._ApproverID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApproverIDChanging(value);
					this.SendPropertyChanging();
					this._ApproverID = value;
					this.SendPropertyChanged("ApproverID");
					this.OnApproverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeRequest", Storage="_Employee", ThisKey="ApproverID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OvertimeRequests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OvertimeRequests.Add(this);
						this._ApproverID = value.EmployeeID;
					}
					else
					{
						this._ApproverID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OvertimeRequest1", Storage="_Employee1", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.OvertimeRequests1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.OvertimeRequests1.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayslipDetails")]
	public partial class PayslipDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PayslipDetailID;
		
		private System.Guid _PayslipID;
		
		private string _Type;
		
		private string _Description;
		
		private decimal _Amount;
		
		private EntityRef<Payslip> _Payslip;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayslipDetailIDChanging(System.Guid value);
    partial void OnPayslipDetailIDChanged();
    partial void OnPayslipIDChanging(System.Guid value);
    partial void OnPayslipIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public PayslipDetail()
		{
			this._Payslip = default(EntityRef<Payslip>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayslipDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PayslipDetailID
		{
			get
			{
				return this._PayslipDetailID;
			}
			set
			{
				if ((this._PayslipDetailID != value))
				{
					this.OnPayslipDetailIDChanging(value);
					this.SendPropertyChanging();
					this._PayslipDetailID = value;
					this.SendPropertyChanged("PayslipDetailID");
					this.OnPayslipDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayslipID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PayslipID
		{
			get
			{
				return this._PayslipID;
			}
			set
			{
				if ((this._PayslipID != value))
				{
					if (this._Payslip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayslipIDChanging(value);
					this.SendPropertyChanging();
					this._PayslipID = value;
					this.SendPropertyChanged("PayslipID");
					this.OnPayslipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payslip_PayslipDetail", Storage="_Payslip", ThisKey="PayslipID", OtherKey="PayslipID", IsForeignKey=true)]
		public Payslip Payslip
		{
			get
			{
				return this._Payslip.Entity;
			}
			set
			{
				Payslip previousValue = this._Payslip.Entity;
				if (((previousValue != value) 
							|| (this._Payslip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payslip.Entity = null;
						previousValue.PayslipDetails.Remove(this);
					}
					this._Payslip.Entity = value;
					if ((value != null))
					{
						value.PayslipDetails.Add(this);
						this._PayslipID = value.PayslipID;
					}
					else
					{
						this._PayslipID = default(System.Guid);
					}
					this.SendPropertyChanged("Payslip");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payslips")]
	public partial class Payslip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PayslipID;
		
		private System.Guid _EmployeeID;
		
		private System.DateTime _PayPeriodStartDate;
		
		private System.DateTime _PayPeriodEndDate;
		
		private System.DateTime _PaymentDate;
		
		private decimal _GrossPay;
		
		private decimal _TotalDeductions;
		
		private decimal _NetPay;
		
		private EntitySet<PayslipDetail> _PayslipDetails;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayslipIDChanging(System.Guid value);
    partial void OnPayslipIDChanged();
    partial void OnEmployeeIDChanging(System.Guid value);
    partial void OnEmployeeIDChanged();
    partial void OnPayPeriodStartDateChanging(System.DateTime value);
    partial void OnPayPeriodStartDateChanged();
    partial void OnPayPeriodEndDateChanging(System.DateTime value);
    partial void OnPayPeriodEndDateChanged();
    partial void OnPaymentDateChanging(System.DateTime value);
    partial void OnPaymentDateChanged();
    partial void OnGrossPayChanging(decimal value);
    partial void OnGrossPayChanged();
    partial void OnTotalDeductionsChanging(decimal value);
    partial void OnTotalDeductionsChanged();
    partial void OnNetPayChanging(decimal value);
    partial void OnNetPayChanged();
    #endregion
		
		public Payslip()
		{
			this._PayslipDetails = new EntitySet<PayslipDetail>(new Action<PayslipDetail>(this.attach_PayslipDetails), new Action<PayslipDetail>(this.detach_PayslipDetails));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayslipID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PayslipID
		{
			get
			{
				return this._PayslipID;
			}
			set
			{
				if ((this._PayslipID != value))
				{
					this.OnPayslipIDChanging(value);
					this.SendPropertyChanging();
					this._PayslipID = value;
					this.SendPropertyChanged("PayslipID");
					this.OnPayslipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPeriodStartDate", DbType="Date NOT NULL")]
		public System.DateTime PayPeriodStartDate
		{
			get
			{
				return this._PayPeriodStartDate;
			}
			set
			{
				if ((this._PayPeriodStartDate != value))
				{
					this.OnPayPeriodStartDateChanging(value);
					this.SendPropertyChanging();
					this._PayPeriodStartDate = value;
					this.SendPropertyChanged("PayPeriodStartDate");
					this.OnPayPeriodStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayPeriodEndDate", DbType="Date NOT NULL")]
		public System.DateTime PayPeriodEndDate
		{
			get
			{
				return this._PayPeriodEndDate;
			}
			set
			{
				if ((this._PayPeriodEndDate != value))
				{
					this.OnPayPeriodEndDateChanging(value);
					this.SendPropertyChanging();
					this._PayPeriodEndDate = value;
					this.SendPropertyChanged("PayPeriodEndDate");
					this.OnPayPeriodEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="Date NOT NULL")]
		public System.DateTime PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrossPay", DbType="Decimal(12,2) NOT NULL")]
		public decimal GrossPay
		{
			get
			{
				return this._GrossPay;
			}
			set
			{
				if ((this._GrossPay != value))
				{
					this.OnGrossPayChanging(value);
					this.SendPropertyChanging();
					this._GrossPay = value;
					this.SendPropertyChanged("GrossPay");
					this.OnGrossPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDeductions", DbType="Decimal(12,2) NOT NULL")]
		public decimal TotalDeductions
		{
			get
			{
				return this._TotalDeductions;
			}
			set
			{
				if ((this._TotalDeductions != value))
				{
					this.OnTotalDeductionsChanging(value);
					this.SendPropertyChanging();
					this._TotalDeductions = value;
					this.SendPropertyChanged("TotalDeductions");
					this.OnTotalDeductionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetPay", DbType="Decimal(12,2) NOT NULL")]
		public decimal NetPay
		{
			get
			{
				return this._NetPay;
			}
			set
			{
				if ((this._NetPay != value))
				{
					this.OnNetPayChanging(value);
					this.SendPropertyChanging();
					this._NetPay = value;
					this.SendPropertyChanged("NetPay");
					this.OnNetPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payslip_PayslipDetail", Storage="_PayslipDetails", ThisKey="PayslipID", OtherKey="PayslipID")]
		public EntitySet<PayslipDetail> PayslipDetails
		{
			get
			{
				return this._PayslipDetails;
			}
			set
			{
				this._PayslipDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Payslip", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Payslips.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Payslips.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PayslipDetails(PayslipDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payslip = this;
		}
		
		private void detach_PayslipDetails(PayslipDetail entity)
		{
			this.SendPropertyChanging();
			entity.Payslip = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayTypes")]
	public partial class PayType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PayTypeID;
		
		private string _TypeName;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayTypeIDChanging(System.Guid value);
    partial void OnPayTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public PayType()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PayTypeID
		{
			get
			{
				return this._PayTypeID;
			}
			set
			{
				if ((this._PayTypeID != value))
				{
					this.OnPayTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PayTypeID = value;
					this.SendPropertyChanged("PayTypeID");
					this.OnPayTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Employee", Storage="_Employees", ThisKey="PayTypeID", OtherKey="PayTypeID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.PayType = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.PayType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleID;
		
		private string _RoleName;
		
		private EntitySet<AppUserRole> _AppUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._AppUserRoles = new EntitySet<AppUserRole>(new Action<AppUserRole>(this.attach_AppUserRoles), new Action<AppUserRole>(this.detach_AppUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_AppUserRole", Storage="_AppUserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<AppUserRole> AppUserRoles
		{
			get
			{
				return this._AppUserRoles;
			}
			set
			{
				this._AppUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppUserRoles(AppUserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_AppUserRoles(AppUserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
}
#pragma warning restore 1591
